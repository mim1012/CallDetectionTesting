// Generated by view binder compiler. Do not edit!
package com.kakao.taxi.test.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kakao.taxi.test.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnCompleteAutomation;

  @NonNull
  public final Button btnMockCall;

  @NonNull
  public final Button btnOneClickAuto;

  @NonNull
  public final Button btnOpenDebugFolder;

  @NonNull
  public final Button btnQuickDiagnose;

  @NonNull
  public final Button btnShowFloating;

  @NonNull
  public final Button btnShowOverlay;

  @NonNull
  public final Button btnStartCapture;

  @NonNull
  public final Button btnStealthMode;

  @NonNull
  public final Button btnTestClick;

  @NonNull
  public final Button btnTestFilter;

  @NonNull
  public final Button btnTestOCR;

  @NonNull
  public final Button btnTestTemplate;

  @NonNull
  public final Button btnUltimateBypass;

  @NonNull
  public final Button btnViewLogs;

  @NonNull
  public final LinearLayout buttonLayout;

  @NonNull
  public final CheckBox chkBypassKakao;

  @NonNull
  public final TextView debugAccessibilityStatus;

  @NonNull
  public final TextView debugCaptureStatus;

  @NonNull
  public final TextView debugClickStatus;

  @NonNull
  public final TextView debugDetectionStatus;

  @NonNull
  public final TextView debugLastCoord;

  @NonNull
  public final LinearLayout debugStatusLayout;

  @NonNull
  public final TextView logText;

  @NonNull
  public final TextView statusText;

  @NonNull
  public final TextView titleText;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnCompleteAutomation, @NonNull Button btnMockCall,
      @NonNull Button btnOneClickAuto, @NonNull Button btnOpenDebugFolder,
      @NonNull Button btnQuickDiagnose, @NonNull Button btnShowFloating,
      @NonNull Button btnShowOverlay, @NonNull Button btnStartCapture,
      @NonNull Button btnStealthMode, @NonNull Button btnTestClick, @NonNull Button btnTestFilter,
      @NonNull Button btnTestOCR, @NonNull Button btnTestTemplate,
      @NonNull Button btnUltimateBypass, @NonNull Button btnViewLogs,
      @NonNull LinearLayout buttonLayout, @NonNull CheckBox chkBypassKakao,
      @NonNull TextView debugAccessibilityStatus, @NonNull TextView debugCaptureStatus,
      @NonNull TextView debugClickStatus, @NonNull TextView debugDetectionStatus,
      @NonNull TextView debugLastCoord, @NonNull LinearLayout debugStatusLayout,
      @NonNull TextView logText, @NonNull TextView statusText, @NonNull TextView titleText) {
    this.rootView = rootView;
    this.btnCompleteAutomation = btnCompleteAutomation;
    this.btnMockCall = btnMockCall;
    this.btnOneClickAuto = btnOneClickAuto;
    this.btnOpenDebugFolder = btnOpenDebugFolder;
    this.btnQuickDiagnose = btnQuickDiagnose;
    this.btnShowFloating = btnShowFloating;
    this.btnShowOverlay = btnShowOverlay;
    this.btnStartCapture = btnStartCapture;
    this.btnStealthMode = btnStealthMode;
    this.btnTestClick = btnTestClick;
    this.btnTestFilter = btnTestFilter;
    this.btnTestOCR = btnTestOCR;
    this.btnTestTemplate = btnTestTemplate;
    this.btnUltimateBypass = btnUltimateBypass;
    this.btnViewLogs = btnViewLogs;
    this.buttonLayout = buttonLayout;
    this.chkBypassKakao = chkBypassKakao;
    this.debugAccessibilityStatus = debugAccessibilityStatus;
    this.debugCaptureStatus = debugCaptureStatus;
    this.debugClickStatus = debugClickStatus;
    this.debugDetectionStatus = debugDetectionStatus;
    this.debugLastCoord = debugLastCoord;
    this.debugStatusLayout = debugStatusLayout;
    this.logText = logText;
    this.statusText = statusText;
    this.titleText = titleText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCompleteAutomation;
      Button btnCompleteAutomation = ViewBindings.findChildViewById(rootView, id);
      if (btnCompleteAutomation == null) {
        break missingId;
      }

      id = R.id.btnMockCall;
      Button btnMockCall = ViewBindings.findChildViewById(rootView, id);
      if (btnMockCall == null) {
        break missingId;
      }

      id = R.id.btnOneClickAuto;
      Button btnOneClickAuto = ViewBindings.findChildViewById(rootView, id);
      if (btnOneClickAuto == null) {
        break missingId;
      }

      id = R.id.btnOpenDebugFolder;
      Button btnOpenDebugFolder = ViewBindings.findChildViewById(rootView, id);
      if (btnOpenDebugFolder == null) {
        break missingId;
      }

      id = R.id.btnQuickDiagnose;
      Button btnQuickDiagnose = ViewBindings.findChildViewById(rootView, id);
      if (btnQuickDiagnose == null) {
        break missingId;
      }

      id = R.id.btnShowFloating;
      Button btnShowFloating = ViewBindings.findChildViewById(rootView, id);
      if (btnShowFloating == null) {
        break missingId;
      }

      id = R.id.btnShowOverlay;
      Button btnShowOverlay = ViewBindings.findChildViewById(rootView, id);
      if (btnShowOverlay == null) {
        break missingId;
      }

      id = R.id.btnStartCapture;
      Button btnStartCapture = ViewBindings.findChildViewById(rootView, id);
      if (btnStartCapture == null) {
        break missingId;
      }

      id = R.id.btnStealthMode;
      Button btnStealthMode = ViewBindings.findChildViewById(rootView, id);
      if (btnStealthMode == null) {
        break missingId;
      }

      id = R.id.btnTestClick;
      Button btnTestClick = ViewBindings.findChildViewById(rootView, id);
      if (btnTestClick == null) {
        break missingId;
      }

      id = R.id.btnTestFilter;
      Button btnTestFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnTestFilter == null) {
        break missingId;
      }

      id = R.id.btnTestOCR;
      Button btnTestOCR = ViewBindings.findChildViewById(rootView, id);
      if (btnTestOCR == null) {
        break missingId;
      }

      id = R.id.btnTestTemplate;
      Button btnTestTemplate = ViewBindings.findChildViewById(rootView, id);
      if (btnTestTemplate == null) {
        break missingId;
      }

      id = R.id.btnUltimateBypass;
      Button btnUltimateBypass = ViewBindings.findChildViewById(rootView, id);
      if (btnUltimateBypass == null) {
        break missingId;
      }

      id = R.id.btnViewLogs;
      Button btnViewLogs = ViewBindings.findChildViewById(rootView, id);
      if (btnViewLogs == null) {
        break missingId;
      }

      id = R.id.buttonLayout;
      LinearLayout buttonLayout = ViewBindings.findChildViewById(rootView, id);
      if (buttonLayout == null) {
        break missingId;
      }

      id = R.id.chkBypassKakao;
      CheckBox chkBypassKakao = ViewBindings.findChildViewById(rootView, id);
      if (chkBypassKakao == null) {
        break missingId;
      }

      id = R.id.debugAccessibilityStatus;
      TextView debugAccessibilityStatus = ViewBindings.findChildViewById(rootView, id);
      if (debugAccessibilityStatus == null) {
        break missingId;
      }

      id = R.id.debugCaptureStatus;
      TextView debugCaptureStatus = ViewBindings.findChildViewById(rootView, id);
      if (debugCaptureStatus == null) {
        break missingId;
      }

      id = R.id.debugClickStatus;
      TextView debugClickStatus = ViewBindings.findChildViewById(rootView, id);
      if (debugClickStatus == null) {
        break missingId;
      }

      id = R.id.debugDetectionStatus;
      TextView debugDetectionStatus = ViewBindings.findChildViewById(rootView, id);
      if (debugDetectionStatus == null) {
        break missingId;
      }

      id = R.id.debugLastCoord;
      TextView debugLastCoord = ViewBindings.findChildViewById(rootView, id);
      if (debugLastCoord == null) {
        break missingId;
      }

      id = R.id.debugStatusLayout;
      LinearLayout debugStatusLayout = ViewBindings.findChildViewById(rootView, id);
      if (debugStatusLayout == null) {
        break missingId;
      }

      id = R.id.logText;
      TextView logText = ViewBindings.findChildViewById(rootView, id);
      if (logText == null) {
        break missingId;
      }

      id = R.id.statusText;
      TextView statusText = ViewBindings.findChildViewById(rootView, id);
      if (statusText == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, btnCompleteAutomation,
          btnMockCall, btnOneClickAuto, btnOpenDebugFolder, btnQuickDiagnose, btnShowFloating,
          btnShowOverlay, btnStartCapture, btnStealthMode, btnTestClick, btnTestFilter, btnTestOCR,
          btnTestTemplate, btnUltimateBypass, btnViewLogs, buttonLayout, chkBypassKakao,
          debugAccessibilityStatus, debugCaptureStatus, debugClickStatus, debugDetectionStatus,
          debugLastCoord, debugStatusLayout, logText, statusText, titleText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
